default_platform :ios

repository = "d4l-data4life/d4l-utils-ios"
project = "Data4LifeSDKUtils"
scheme = "Data4LifeSDKUtils"
name = "Data4LifeSDKUtils"
buildPath = "build/DerivedData"

platform :ios do

  desc "Run unit tests and upload code coverage"
  lane :test do
    scan(
      scheme: scheme,
      derived_data_path: buildPath,
      code_coverage: true,
      clean: true
    )
  end

  desc "Lint sources using swiftlint and check the license headers"
  lane :lint do |options|
    autocorrect = options[:autocorrect] == true
    lint_headers(autocorrect)
    swiftlint(
      mode: autocorrect ? :autocorrect : :lint,
      config_file: ".swiftlint.yml",
      strict: !autocorrect
    )
  end

  desc "Check license headers"
  lane :lint_headers do |options|
    autocorrect = options[:autocorrect] == true
    files = Dir.chdir("..") do
      files = Dir.glob('{Sources/SDKUtils,Tests/SDKUtilsTests}/**/*.{swift,h,cpp,m}')
    end
    license = "./LICENSE"

    lint_source_for_license_headers(
      license: license,
      files: files,
      autocorrect: autocorrect,
      strict: !autocorrect
    )
  end

  desc "Prepare release"
  desc "#### Options"
  desc " * **`version`** (required): The new version of the framework"
  desc " * **`api_token`** (required): Github API token"
  lane :prepare_release do | options |
    if !options[:version]
      UI.user_error!("Please add required parameter version (eg. version:\"1.0.0\"")
    end

    if !options[:api_token]
      UI.user_error!("Please add required parameter version (eg. api_token:\"xxxxxxxxx\"")
    end

    version = options[:version]
    apiToken = options[:api_token]
    remote = "origin"
    changelog = parseAndCheckChangelog("../CHANGELOG.adoc", version)
    archiveUtilsPath = utilsFrameworkArchivePath(version)

    unless changelog 
      UI.user_error!("Please add all changes of the version to the CHANGELOG.adoc file")
    end 

    update_plist_versions(version: version)
    update_readme_versions(version: version)
    update_badge(version: version)
    build_utils(version: version)
    
    Dir.chdir("..") do
      upload_archive_to_s3(repository, archiveUtilsPath)
      update_swift_package_file(repository, archiveUtilsPath)
    end 

    # Ask for confirmation for github
    if prompt(text: "#{version} has been prepped for release. If you have any additional changes you would like to make to the README or CHANGELOG, please do those before continuing. Would you like to commit, and push #{version} to #{remote}?".green, boolean: true, ci_input:"y")

      # Push all generated/modified files 
      git_add
      git_commit(
        path: ".",
        message: "Preparing for the #{version} release"
      )

      push_to_git_remote(
        remote: remote,
        tags: false
      )

      # Make new draft release to GitHub
      create_github_draft(
        version: version,
        api_token: apiToken,
        changelog: changelog,
        archive_path: archiveUtilsPath
      )
    else
      UI.message("When finished, commit your changes.")
    end
  end

  desc "Prepare snapshot"
  lane :prepare_snapshot do 
 
    snapshotName = current_git_branch().split("/").last 
    remote = "origin"
    changelog = "### #{snapshotName}"
    archiveUtilsPath = utilsFrameworkArchivePath(snapshotName)

    build_utils(version: snapshotName)
    
    Dir.chdir("..") do
      upload_archive_to_s3(repository, archiveUtilsPath)
      update_swift_package_file(repository, archiveUtilsPath)
    end 

    # Ask for confirmation for github
    if prompt(text: "#{snapshotName} has been prepped for snapshot-release. Would you like to commit, and push #{snapshotName} to #{remote}?".green, boolean: true, ci_input:"y")

      # Push all generated/modified files 
      git_add
      git_commit(
        path: ".",
        message: "Preparing for the #{snapshotName} release"
      )

      push_to_git_remote(
        remote: remote,
        tags: false
      )
    else
      UI.message("When finished, commit your changes.")
    end
  end

  desc "Build xcframework for distribution"
  lane :build_utils do |options|
    if options[:version] == nil
      UI.user_error!("Please add required parameter version (eg. version:\"1.0.0\"")
    end

    xcframeworkPath = "#{name}.xcframework"

    build_xcframework(schemeName: scheme,
                      frameworkName: name,
                      outputPath: xcframeworkPath)

    Dir.chdir("..") do
      root = Dir.pwd
      configuration = "Release"
      buildPath = "xcbuild"

      archiveUtilsPath = utilsFrameworkArchivePath(options[:version])
      if File.exist?(archiveUtilsPath)
        sh "rm #{archiveUtilsPath}"
      end

      sh "zip -r #{archiveUtilsPath} #{xcframeworkPath}"
      sh "rm -rf #{xcframeworkPath}"
    end
  end

  desc "Build any project xcframework"
  lane :build_xcframework do |options|
    if options[:schemeName] == nil
        raise "Missing scheme name".red
    end
    if options[:frameworkName] == nil
        raise "Missing framework name".red
    end
    if options[:outputPath] == nil
        raise "Missing output path".red
    end

    Dir.chdir("..") do
      root = Dir.pwd
      configuration = "Release"
      buildPath = "xcbuild"

      schemeName = options[:schemeName]
      frameworkName = options[:frameworkName]
      outputPath = options[:outputPath]

      if File.exist?(buildPath)
        sh "rm -rf #{buildPath}"
      end
      if File.exist?(outputPath)
        sh "rm -rf #{outputPath}"
      end

      sh "rm -rf #{outputPath}"
      sh "xcodebuild archive -scheme #{schemeName} -configuration #{configuration} -archivePath #{buildPath}/#{configuration}/#{frameworkName}-iphonesimulator.xcarchive -destination 'generic/platform=iOS Simulator' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO"
      sh "xcodebuild archive -scheme #{schemeName} -configuration #{configuration} -archivePath #{buildPath}/#{configuration}/#{frameworkName}-iphoneos.xcarchive -destination 'generic/platform=iOS' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO"
      sh "xcodebuild -create-xcframework \
          -framework #{buildPath}/#{configuration}/#{frameworkName}-iphonesimulator.xcarchive/Products/Library/Frameworks/#{frameworkName}.framework \
          -framework #{buildPath}/#{configuration}/#{frameworkName}-iphoneos.xcarchive/Products/Library/Frameworks/#{frameworkName}.framework \
          -output #{outputPath}"
    end
  end

  desc "Upload to a github release draft"
  lane :create_github_draft do |options|

    if options[:version] == nil
      UI.user_error!("Please add required parameter version (eg. version:\"1.0.0\"")
    end

    if options[:api_token] == nil
      UI.user_error!("Please add required parameter api_token (eg. api_token:\"xxxxxxxxxx\"")
    end
    
    if options[:archive_path] == nil
      UI.user_error!("Please add required parameter archive_path (eg. archive_path:\"xxxxxxxxxx\"")
    end

    changelog = options[:changelog]
    if changelog == nil
       changelog = "### #{version}"
    end

    version = options[:version]
    apiToken = options[:api_token]
    archivePath = options[:archive_path]

    set_github_release(
      repository_name: repository,
      api_token: apiToken,
      name: version,
      tag_name: version,
      description: changelog,
      is_draft: true,
      upload_assets: [archivePath]
    )
  end

  desc "Update version number in project plists"
  lane :update_plist_versions do |options|
    if options[:version] == nil
       UI.user_error!("Please add required parameter version (eg. version:\"1.0.0\"")
    end

    version = options[:version]
    numberOnlyVersion = version.split("-").first.delete_prefix("v")

    if numberOnlyVersion.match(/\A\d+(?:\.\d+)*\z/) == nil
        raise "Could not generate proper version format".red
    end

    plists = ["Sources/SDKUtils/Info.plist", "Tests/SDKUtilsTests/Info.plist"]
    plists.each { |path|
      update_info_plist(
        xcodeproj: "#{project}.xcodeproj",
        plist_path: path,
        block: proc do |plist|
          plist["CFBundleShortVersionString"] = numberOnlyVersion
        end
      )
    }
  end

  desc "Update version numbers in README.adoc"
  lane :update_readme_versions do | options |
    if !options[:version]
      raise "No version specified!".red
    end

    version = options[:version]
    path = "../README.adoc"
    numberOnlyVersion = version.split("-").first.delete_prefix("v")

    if numberOnlyVersion.match(/\A\d+(?:\.\d+)*\z/) == nil
        raise "Could not generate proper AppStore version format".red
    end

    readmeData = File.read(path)
    readmeDataUpdated = readmeData.gsub(/ [0-9]+\.[0-9]+\.[0-9]+/, " #{numberOnlyVersion}")
    File.write(path, readmeDataUpdated)
  end

  desc "Update readme badge"
  lane :update_badge do |options|
    if options[:version] == nil
      UI.user_error!("Please add required parameter version (eg. version:\"1.0.0\"")
    end
    
    Dir.chdir("..") do
      sh "curl https://img.shields.io/badge/Release-#{options[:version]}-blueviolet.svg -s -o assets/images/badge-release-latest.svg"
    end 
  end 

  def utilsFrameworkArchivePath(version)
     return "Data4LifeSDKUtils-xcframework-#{version}.zip"
  end

  def parseAndCheckChangelog(path, version)

    changelogData = File.read(path)

    changelogVersionsSeparator = "== link:{link-repository}/releases/tag/v"
    changelogVersion = version.delete_prefix("v")
    changelogSections = changelogData.split(changelogVersionsSeparator)
    currentVersionSectionIndex = changelogSections.index { |section| section.include?("[#{changelogVersion}]")}

    unless currentVersionSectionIndex
      return nil
    end

    changelog = "## #{version}\n" + changelogSections[currentVersionSectionIndex].lines[1..-1].join
    return changelog.gsub("=", "#")
  end

  def update_swift_package_file(repository, path)
    sh "swift package compute-checksum #{path}" do |status, result| 

      checksum = result.chop
      url = "https://d4l-ios-artifact-repository.s3.eu-central-1.amazonaws.com/#{s3_key(repository, path)}"

      packageSwiftData = File.read("Package.swift")
      updatedPackageSwiftData = packageSwiftData.gsub(/url: \"[a-zA-Z0-9:\-\/_.,\\()]+xcframework[a-zA-Z0-9:\-\/_.,\\()]+\"/, "url: \"#{url}\"")
      updatedPackageSwiftData = updatedPackageSwiftData.gsub(/checksum: \"[a-zA-Z0-9]+\"/, "checksum: \"#{checksum}\"")
    
      File.write("Package.swift", updatedPackageSwiftData)
    end
  end 

  def upload_archive_to_s3(repository, path)
    sh "aws s3api put-object --bucket d4l-ios-artifact-repository --key #{s3_key(repository, path)} --body #{path}"
  end 

  def s3_key(repository, path)
    return "#{repository}/#{path}"
  end

  def current_git_branch()
    sh "git branch --show-current" do |status, result|
      return result.chop
    end 
  end
end
