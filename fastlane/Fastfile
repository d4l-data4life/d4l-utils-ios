default_platform :ios

project = "Data4LifeSDKUtils"
scheme = "Data4LifeSDKUtils"
repository = "d4l-data4life/d4l-utils-ios"
framework_binary_path = "build/" + project + ".framework.zip"
podspec_path = '../Data4LifeSDKUtils.podspec'
private_podspec_repo_name = 'd4l-data4life'
private_podspect_repo_url = 'https://github.com/d4l-data4life/d4l-cocoapods-specs.git'
device = "iPhone 11 (14.0)"

platform :ios do
  desc "Run unit tests and upload code coverage"
  lane :test do
    Dir.chdir("..") do
       sh "./wcarthage.sh bootstrap --platform ios --cache-builds"
    end
    scan(
      project: "Data4LifeSDKUtils.xcodeproj",
      scheme: "Data4LifeSDKUtils",
      derived_data_path: "build/DerivedData",
      devices: device,
      clean: true
    )

  end

  desc "Package and release framework"
  desc "#### Options"
  desc " * **`version`** (required): The new version of the framework"
  desc " * **`api_token`** (required): Github API token"
  desc " * **`allow_dirty_branch`**: Allows the git branch to be dirty before continuing. Defaults to false"
  desc " * **`remote`**: The name of the git remote. Defaults to `origin`. (`DEPLOY_REMOTE`)"
  desc " * **`allow_branch`**: The name of the branch to build from. Defaults to `main`. (`DEPLOY_BRANCH`)"
  desc " * **`skip_git_pull`**: Skips pulling the git remote. Defaults to false"
  desc " * **`is_prerelease`**: Marks GitHub release as Pre-release. Defaults to false"
  lane :release_framework do | options |
    if options[:allow_dirty_branch] != true
      ensure_git_status_clean
    end

    if !options[:version]
      raise "No version specified!".red
    end

    if !options[:api_token]
      raise "No api_token specified!".red
    end

    version = options[:version]
    is_prerelease = options[:is_prerelease] ||= false

    remote = options[:remote] ? options[:remote] : (ENV["DEPLOY_REMOTE"] ? ENV["DEPLOY_REMOTE"] : "origin")
    allowed_branch = options[:allow_branch] ? options[:allow_branch] : (ENV["DEPLOY_BRANCH"] ? ENV["DEPLOY_BRANCH"] : "release/#{version}")
    ensure_git_branch(branch: allowed_branch)

    if options[:skip_git_pull] != true
      sh("git pull #{remote} #{allowed_branch}")
    end

    # Parse changelog data
    changelog_path = options[:changelog_path] ? options[:changelog_path] : "../CHANGELOG.md"
    changelog_data = File.read(changelog_path)
    # Try to find all markdown headers and split
    changelog_sections = changelog_data.split(/\#{2,3}\s/)
    # Look out for new section of the newest version
    current_changelog_index = changelog_sections.index { |h| h.start_with?("[#{version}]")}

    unless current_changelog_index
      UI.error("Please add all changes of the version to the CHANGELOG.md file")
    end

    # Get all split for this version and combine them again to one text
    changelog_header_indices = changelog_sections.each_with_index.select {|s, _| s.match(/^\[([0-9]+)\.([0-9]+)\.([0-9]+)\-?([0-9a-zA-Z]*)\.?([0-9a-zA-Z]*)\]/) }.map(&:last)
    next_changelog_index = changelog_header_indices.index { |h| h == current_changelog_index } + 1
    changelog = "### " + changelog_sections[current_changelog_index + 1...changelog_header_indices[next_changelog_index]].join("### ")

    # Ask for confirmation
    if prompt(text: "#{version} has been prepped for release. If you have any additional changes you would like to make to the README or CHANGELOG, please do those before continuing. Would you like to commit, tag, and push #{version} to #{remote}?".green, boolean: true, ci_input:"y")

      # Update version in different places
      update_plist_versions(sdk_version: version)
      update_readme_versions(version: version)

      # Add and commit all of the generated files
      git_add
      git_commit(
        path: ".",
        message: "Preparing for the #{version} release"
      )

      # Push latest changes
      push_to_git_remote(
        remote: remote,
        tags: false
      )

      # Create and push new version tag
      add_git_tag(tag: "#{version}")
      push_git_tags(tag: "#{version}")

      build_framework_binary

      # Post new release to GitHub
      set_github_release(
        repository_name: repository,
        api_token: options[:api_token],
        name: "#{version}",
        tag_name: version,
        description: changelog,
        is_prerelease: is_prerelease,
        upload_assets: [framework_binary_path]
      )

    else
      Helper.log.info "When finished, commit your changes.".red
    end
  end

  desc "Build xcframework for distribution"
  lane :build_xcframework do |options|
    if options[:version] == nil
        raise "Missing release version".red
    end

    Dir.chdir("..") do
      root = Dir.pwd
      xcFrameworkPath = "#{project}.xcframework"
      cryptoSwiftPath = "CryptoSwift.xcframework"
      configuration = "Release"
      buildPath = "xcbuild"
      sh "rm -rf #{buildPath}"
      sh "rm -rf #{xcFrameworkPath}"
      sh "xcodebuild archive -scheme #{scheme} -configuration #{configuration} -archivePath #{buildPath}/#{configuration}/#{project}-iphonesimulator.xcarchive -destination 'generic/platform=iOS Simulator' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES"
      sh "xcodebuild archive -scheme #{scheme} -configuration #{configuration} -archivePath #{buildPath}/#{configuration}/#{project}-iphoneos.xcarchive -destination 'generic/platform=iOS' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES"

      symbolMapUUIDFile = Dir.children("./#{buildPath}/#{configuration}/#{project}-iphoneos.xcarchive/BCSymbolMaps/").first()
      sh "xcodebuild -create-xcframework \
          -framework #{buildPath}/#{configuration}/#{project}-iphonesimulator.xcarchive/Products/Library/Frameworks/#{project}.framework \
          -debug-symbols '#{root}/#{buildPath}/#{configuration}/#{project}-iphonesimulator.xcarchive/dSYMs/#{project}.framework.dSYM' \
          -framework #{buildPath}/#{configuration}/#{project}-iphoneos.xcarchive/Products/Library/Frameworks/#{project}.framework \
          -debug-symbols '#{root}/#{buildPath}/#{configuration}/#{project}-iphoneos.xcarchive/dSYMs/#{project}.framework.dSYM' \
          -debug-symbols '#{root}/#{buildPath}/#{configuration}/#{project}-iphoneos.xcarchive/BCSymbolMaps/#{symbolMapUUIDFile}' \
          -output #{xcFrameworkPath}"

      sh "zip -r Data4LifeSDKUtils-xcframeworks-#{options[:version]}.zip #{xcFrameworkPath} #{cryptoSwiftPath} LICENSE"
      sh "rm -rf #{xcFrameworkPath}"
    end
  end

  desc "Upload to a github release"
  lane :gh_release do |options|

    if options[:version] == nil
        raise "Missing release version".red
    end

    if options[:api_token] == nil
        raise "Missing api token".red
    end

    if options[:asset] == nil
        raise "Missing asset".red
    end

    isPrerelease = options[:is_prerelease]
    if isPrerelease == nil
        isPrerelease = true
    end

    changelog = options[:changelog]
    if changelog == nil
       changelog = "Pre-release"
    end

    set_github_release(
      repository_name: repository,
      api_token: options[:api_token],
      name: "#{options[:version]}",
      tag_name: options[:version],
      description: changelog,
      is_prerelease: isPrerelease,
      upload_assets: [options[:asset]]
    )
  end

  desc "Update AppStore and utils version number in project plists"
  lane :update_plist_versions do |options|
    if options[:sdk_version] == nil
        raise "Missing SDK version".red
    end

    sdk_version = options[:sdk_version]
    app_store_version = sdk_version.split("-").first

    if app_store_version.match(/\A\d+(?:\.\d+)*\z/) == nil
        raise "Could not generate proper AppStore version format".red
    end

    plists = ["Sources/SDKUtils/Info.plist", "Tests/SDKUtilsTests/Info.plist"]
    plists.each { |path|
      update_info_plist(
        xcodeproj: "#{project}.xcodeproj",
        plist_path: path,
        block: proc do |plist|
          plist["CFBundleShortVersionString"] = app_store_version
        end
      )
    }
  end

  desc "Update podspec version"
  lane :update_podspec_version do | options |
    UI.user_error!("Could not find podspec file at path #{podspec_path}") unless File.exist?(podspec_path)

    if !options[:version]
      raise "No version specified!".red
    end

    new_version = options[:version]

    podspec_content = File.read(podspec_path)
    updated = podspec_content.gsub(/"([0-9]+)\.([0-9]+)\.([0-9]+)\-?([0-9a-zA-Z]*)\.?([0-9a-zA-Z]*)"/, "\"#{new_version}\"")
    File.write(podspec_path, updated)
  end

  desc "Push new podspec to repo"
  lane :push_podspec do
    # pod_push fastlane action does not support private switch
    # pod_push(path: "./Data4LifeFHIR.podspec", repo: "gesundheitscloud", allow_warnings: true)
    repo_list = sh "bundle exec pod repo list"
    if !repo_list.include? private_podspec_repo_name
     sh "bundle exec pod repo add #{private_podspec_repo_name} #{private_podspect_repo_url}"
    end

    sh "bundle exec pod repo push #{private_podspec_repo_name} #{podspec_path} --private --allow-warnings"
  end

  desc "Lint sources using swiftlint and check the license headers"
  lane :lint do |options|
    autocorrect = options[:autocorrect] == true

    files = Dir.chdir("..") do
      files = Dir.glob('{Sources/SDKUtils/Source,Tests/SDKUtilsTests}/**/*.{swift,h,cpp,m}')
    end

    swiftlint(
      files: files,
      mode: autocorrect ? :autocorrect : :lint,
      config_file: ".swiftlint.yml",
      strict: !autocorrect
    )
  end

  desc "Check license headers"
  lane :lint_headers do |options|
    autocorrect = options[:autocorrect] == true
    files = Dir.chdir("..") do
      files = Dir.glob('{Sources/SDKUtils/Source,Tests/SDKUtilsTests}/**/*.{swift,h,cpp,m}')
    end
    license = "./LICENSE"

    lint_source_for_license_headers(
      license: license,
      files: files,
      autocorrect: autocorrect,
      strict: !autocorrect
    )
  end

  desc "Update version numbers in README.md"
  lane :update_readme_versions do | options |
    if !options[:version]
      raise "No version specified!".red
    end

    readme_path = "../README.md"
    sdk_version = options[:version]
    app_store_version = sdk_version.split("-").first

    if app_store_version.match(/\A\d+(?:\.\d+)*\z/) == nil
        raise "Could not generate proper AppStore version format".red
    end

    readme_contents = File.read(readme_path)
    # Update CocoaPods version number (pattern: `v1.0.0-`)
    updated = readme_contents.gsub(/v([0-9]+)\.([0-9]+)\.([0-9]+)-/, "v#{app_store_version}-")
    # Update GitHub pages version number (pattern: `/1.0.0)`)
    updated = updated.gsub(/\/([0-9]+)\.([0-9]+)\.([0-9]+)\)/, "\/#{app_store_version}\)")
    File.write(readme_path, updated)
  end

end
