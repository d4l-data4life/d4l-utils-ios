// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Data4LifeSDKUtils
import CryptoKit
import CryptoSwift
import Foundation
import Swift
public enum MIMEType : Swift.String, Swift.CaseIterable {
  case jpeg
  case png
  case tiff
  case pdf
  case dcm
  public static func of(_ data: Foundation.Data) -> Data4LifeSDKUtils.MIMEType?
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [Data4LifeSDKUtils.MIMEType]
  public static var allCases: [Data4LifeSDKUtils.MIMEType] {
    get
  }
}
public protocol ByteCountable {
  var sizeInBytes: Swift.Int { get }
}
public enum DataValidationError : Swift.Error, Swift.Equatable {
  case invalidType
  case invalidSize
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Data4LifeSDKUtils.DataValidationError, b: Data4LifeSDKUtils.DataValidationError) -> Swift.Bool
}
final public class DataValidator {
  final public let supportedMimeTypes: [Data4LifeSDKUtils.MIMEType]
  final public let upperFilesizeLimitInBytes: Swift.Int?
  public init(supportedMimeTypes: [Data4LifeSDKUtils.MIMEType], upperFilesizeLimitInBytes: Swift.Int?)
  @objc deinit
}
extension DataValidator {
  final public func validateMimeType(of data: Foundation.Data) throws
  final public func validateSize(of data: Foundation.Data) throws
}
extension DataValidator {
  public static var d4lSDK: Data4LifeSDKUtils.DataValidator {
    get
  }
}
extension Data {
  public var sha1Hash: Swift.String {
    get
  }
}
extension Data : Data4LifeSDKUtils.ByteCountable {
  public var sizeInBytes: Swift.Int {
    get
  }
}
extension Data4LifeSDKUtils.MIMEType : Swift.Equatable {}
extension Data4LifeSDKUtils.MIMEType : Swift.Hashable {}
extension Data4LifeSDKUtils.MIMEType : Swift.RawRepresentable {}
extension Data4LifeSDKUtils.DataValidationError : Swift.Hashable {}
